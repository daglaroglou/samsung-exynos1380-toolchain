name: Create Toolchain Release Package

on:
  workflow_dispatch:  # Manual triggering only
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        default: 'latest'

jobs:
  create-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
    
    - name: Checkout LFS objects
      run: git lfs checkout
    
    - name: Create toolchain package
      run: |
        # Set package name from manual input
        PACKAGE_NAME="samsung-exynos1380-toolchain-${{ github.event.inputs.tag_name }}"
        
        echo "Creating package: ${PACKAGE_NAME}.tar.gz"
        
        # Create temporary directory for packaging
        mkdir -p "/tmp/${PACKAGE_NAME}"
        
        # Copy repository contents excluding unwanted files
        rsync -av \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='.gitattributes' \
          --exclude='README.md' \
          --exclude='*.md' \
          ./ "/tmp/${PACKAGE_NAME}/"
        
        # Create the tar.gz package
        cd /tmp
        tar -czf "${PACKAGE_NAME}.tar.gz" "${PACKAGE_NAME}/"
        
        # Move package to workspace
        mv "${PACKAGE_NAME}.tar.gz" "${GITHUB_WORKSPACE}/"
        
        # Store package name for later steps
        echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
        echo "PACKAGE_FILE=${PACKAGE_NAME}.tar.gz" >> $GITHUB_ENV
    
    - name: Calculate package info
      run: |
        PACKAGE_SIZE=$(du -h "${PACKAGE_FILE}" | cut -f1)
        PACKAGE_SIZE_BYTES=$(stat -f%z "${PACKAGE_FILE}" 2>/dev/null || stat -c%s "${PACKAGE_FILE}")
        echo "Package size: ${PACKAGE_SIZE} (${PACKAGE_SIZE_BYTES} bytes)"
        echo "PACKAGE_SIZE=${PACKAGE_SIZE}" >> $GITHUB_ENV
        echo "PACKAGE_SIZE_BYTES=${PACKAGE_SIZE_BYTES}" >> $GITHUB_ENV
    
    - name: Determine release details
      run: |
        # Use the input tag name from manual dispatch
        TAG_NAME="${{ github.event.inputs.tag_name }}"
        RELEASE_NAME="Samsung Exynos1380 Toolchain ${{ github.event.inputs.tag_name }}"
        
        # Mark manual releases as prerelease if not a version tag
        if [[ "${{ github.event.inputs.tag_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          PRERELEASE="false"
        else
          PRERELEASE="true"
        fi
        
        echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
        echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
        echo "PRERELEASE=${PRERELEASE}" >> $GITHUB_ENV
    
    - name: Create or update tag
      run: |
        # Create or update tag for the release
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Delete existing tag if it exists (for updating releases)
        git tag -d "${{ env.TAG_NAME }}" 2>/dev/null || true
        git push origin --delete "${{ env.TAG_NAME }}" 2>/dev/null || true
        
        # Create new tag
        git tag -a "${{ env.TAG_NAME }}" -m "Release ${{ env.TAG_NAME }}"
        git push origin "${{ env.TAG_NAME }}"
    
    - name: Delete existing release (if updating)
      continue-on-error: true
      run: |
        # Try to delete existing release (useful for updating)
        gh release delete "${{ env.TAG_NAME }}" --yes 2>/dev/null || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: ${{ env.RELEASE_NAME }}
        body: |
          # ${{ env.RELEASE_NAME }}
          
          This release contains the complete Samsung Exynos1380 development toolchain.
          
          ## Package Contents
          - Clang compiler toolchain (clang-r450784d)
          - GCC cross-compiler (x86_64-linux-glibc2.17-4.8)
          - Android build tools and utilities
          - Kernel build tools
          - System libraries and headers
          
          ## Package Information
          - **File**: `${{ env.PACKAGE_FILE }}`
          - **Size**: ${{ env.PACKAGE_SIZE }}
          - **Architecture**: x86_64 Linux
          - **Created**: Manually triggered
          
          ## Installation
          ```bash
          # Extract the toolchain
          tar -xzf ${{ env.PACKAGE_FILE }}
          
          # Add to PATH (example)
          export PATH="$PWD/${{ env.PACKAGE_NAME }}/clang/host/linux-x86/clang-r450784d/bin:$PATH"
          export PATH="$PWD/${{ env.PACKAGE_NAME }}/prebuilts/build-tools/linux-x86/bin:$PATH"
          ```
          
          ## Verification
          ```bash
          # Verify clang installation
          clang --version
          
          # Verify build tools
          ninja --version
          make --version
          ```
          
          ---
          *Generated on ${{ github.run_id }} â€¢ Commit: ${{ github.sha }}*
        draft: false
        prerelease: ${{ env.PRERELEASE }}
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.PACKAGE_FILE }}
        asset_name: ${{ env.PACKAGE_FILE }}
        asset_content_type: application/gzip
    
    - name: Summary
      run: |
        echo "## ðŸ“¦ Toolchain Release Created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Package Name**: \`${{ env.PACKAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **File**: \`${{ env.PACKAGE_FILE }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Size**: ${{ env.PACKAGE_SIZE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: \`${{ env.TAG_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Type**: ${{ env.PRERELEASE == 'true' && 'Pre-release' || 'Release' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: Manual workflow dispatch" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸŽ‰ **Release created successfully!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“¥ **Download**: [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ env.TAG_NAME }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The toolchain package is now available as a permanent release and can be downloaded from the Releases page." >> $GITHUB_STEP_SUMMARY
